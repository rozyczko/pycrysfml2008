# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - docker_pre_clean
  - make
  - docker_post_clean

docker_pre_clean:
  stage: docker_pre_clean
  script:
    - ${CI_PROJECT_DIR}/BuildServer/Docker/clean.sh
  allow_failure: true
  tags:
    - docker
    - sci
    - ubuntu

docker_post_clean:
  stage: docker_post_clean
  script:
    - ${CI_PROJECT_DIR}/BuildServer/Docker/clean.sh
  allow_failure: true
  when: always
  dependencies: []
  tags:
    - docker
    - sci
    - ubuntu

make:job-windows:       # This job runs in the build stage, which runs first.
  stage: make
  script:
    - echo "Compiling the code..."
    - call "%CI_PROJECT_DIR%\\BuildServer\\Machines\\ci-sci-win-1.bat" 
    - call "%CI_PROJECT_DIR%\\BuildServer\\build_windows.bat"
    - echo "Compile complete."
  tags:
    - windows-10
  artifacts:
    name: "PyCrysfml08 Windows Python3.6"
    paths:
      - "%CI_PROJECT_DIR%\\pycrysfml08"
    when: on_success


make:linux_ifort_xenial:
  stage: make
  script:
    - docker build --force-rm -t ci_crysfml_xenial_ifort -f ${CI_PROJECT_DIR}/BuildServer/Docker/Dockerfile_xenial_ifort_setup .
    - docker build --force-rm --no-cache -t ci_crysfml_xenial_ifort_build -f ${CI_PROJECT_DIR}/BuildServer/Docker/Dockerfile_xenial_ifort_build_F2008 --build-arg CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA} --build-arg CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} .
    - docker run -i -v${PWD}:/artifacts/ -v/users/ci/projects/fullprof/intel:/opt/intel ci_crysfml_xenial_ifort_build
  tags:
    - docker
    - sci
    - ubuntu
  artifacts:
    name: "PyCrysfml08 Ubuntu Xenial"
    paths:
      - "${CI_PROJECT_DIR}/pycrysfml08"
    when: on_success

make:linux_ifort:
  stage: make
  script:
    - docker build --force-rm -t ci_crysfml_latest_ifort -f ${CI_PROJECT_DIR}/BuildServer/Docker/Dockerfile_latest_ifort_setup .
    - docker build --force-rm --no-cache -t ci_crysfml_latest_ifort_build -f ${CI_PROJECT_DIR}/BuildServer/Docker/Dockerfile_latest_ifort_build_F2008 --build-arg CI_COMMIT_SHORT_SHA=${CI_COMMIT_SHORT_SHA} --build-arg CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} .
    - docker run -i -v${PWD}:/artifacts/ -v/users/ci/projects/fullprof/intel:/opt/intel ci_crysfml_latest_ifort_build
  tags:
    - docker
    - sci
    - ubuntu
  artifacts:
    name: "PyCrysfml08 Ubuntu Latest"
    paths:
      - "${CI_PROJECT_DIR}/pycrysfml08"
    when: on_success

